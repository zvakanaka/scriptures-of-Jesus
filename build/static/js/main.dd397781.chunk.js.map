{"version":3,"sources":["ColorModeToggle.jsx","TopicalHeading.jsx","Page.jsx","App.js","index.js"],"names":["ColorModeToggle","_useColorMode","useColorMode","colorMode","toggleColorMode","react_default","a","createElement","IconButton","onClick","icon","variantColor","aria-label","concat","TopicalHeading","_ref","heading","count","listItems","onCheck","_useState","useState","map","_ref2","key","localStorage","getItem","_useState2","Object","slicedToArray","checkedItems","setCheckedItems","allChecked","every","Boolean","isIndeterminate","some","Accordion","Box","flex","textAlign","Flex","Checkbox","pr","isChecked","onChange","e","_ref3","target","checked","Heading","as","size","filter","length","pb","List","spacing","style","marginLeft","li","i","arr","item","j","nodes","node","tag","Link","color","href","isExternal","text","Page","children","theme","useTheme","bgColor","light","colors","white","dark","gray","black","background","storedItem","setItem","Date","removeItem","rootElement","document","getElementById","ReactDOM","render","className","ThemeProvider","CSSReset","ColorModeProvider","src_Page","p","justify","src_ColorModeToggle","data","guideRefs","guideRef","src_TopicalHeading","source","display","ul"],"mappings":"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","file":"static/js/main.dd397781.chunk.js","sourcesContent":["import React from \"react\";\n\nimport { IconButton, useColorMode } from \"@chakra-ui/core\";\n\nfunction ColorModeToggle() {\n  const { colorMode, toggleColorMode } = useColorMode();\n  return (\n    <header>\n      <IconButton\n        onClick={toggleColorMode}\n        icon={colorMode === \"light\" ? \"moon\" : \"sun\"}\n        variantColor=\"blue\"\n        aria-label={`Change to ${\n          colorMode === \"light\" ? \"dark\" : \"light\"\n        } mode`}\n      />\n    </header>\n  );\n}\n\nexport default ColorModeToggle;\n","import React, { useState } from \"react\";\nimport {\n  Box,\n  Checkbox,\n  List,\n  ListItem,\n  Link,\n  // Icon,\n  AccordionItem,\n  AccordionHeader,\n  AccordionPanel,\n  AccordionIcon,\n  Heading,\n  Flex\n} from \"@chakra-ui/core\";\n\nfunction TopicalHeading({ heading, count, listItems, onCheck }) {\n  const [checkedItems, setCheckedItems] = useState(\n    listItems.map(({ key }) => localStorage.getItem(key))\n  );\n\n  function updateCheckedItems(arr, key, checked) {\n    onCheck(key, checked);\n    setCheckedItems(arr);\n  }\n\n  const allChecked = checkedItems.every(Boolean);\n  const isIndeterminate = checkedItems.some(Boolean) && !allChecked;\n  return (\n    <AccordionItem>\n      <AccordionHeader>\n        <Box flex=\"1\" textAlign=\"left\">\n          <Flex>\n            <Checkbox\n              pr={3}\n              isChecked={allChecked}\n              isIndeterminate={isIndeterminate}\n              onChange={e =>\n                setCheckedItems(\n                  listItems.map(({ key }) => {\n                    onCheck(key, e.target.checked);\n                    return e.target.checked;\n                  })\n                )\n              }\n            />\n            <Heading as=\"h2\" size=\"lg\">\n              {heading} <span>{checkedItems.filter(Boolean).length}</span>/\n              <span>{count}</span>\n            </Heading>\n          </Flex>\n        </Box>\n        <AccordionIcon />\n      </AccordionHeader>\n      <AccordionPanel pb={4}>\n        <List spacing={1} style={{ marginLeft: \"25px\" }}>\n          {listItems.map((li, i) => {\n            return (\n              <ListItem key={li.key}>\n                <Checkbox\n                  key={li.key}\n                  isChecked={checkedItems[i]}\n                  onChange={e =>\n                    updateCheckedItems(\n                      checkedItems.map((item, j) =>\n                        i === j ? e.target.checked : item\n                      ),\n                      li.key,\n                      e.target.checked\n                    )\n                  }\n                >\n                  {li.nodes.map(node => {\n                    if (node.tag === \"A\") {\n                      return (\n                        <Link\n                          color=\"teal.300\"\n                          key={node.href}\n                          isExternal\n                          href={node.href}\n                        >\n                          {node.text}\n                          {/* <Icon name=\"external-link\" mx=\"2px\" /> */}\n                        </Link>\n                      );\n                    } else return node.text;\n                  })}\n                </Checkbox>\n              </ListItem>\n            );\n          })}\n        </List>\n      </AccordionPanel>\n    </AccordionItem>\n  );\n}\n\nexport default TopicalHeading;\n","import React from \"react\";\nimport { useColorMode, useTheme } from \"@chakra-ui/core\";\n\nfunction Page({ children }) {\n  const { colorMode } = useColorMode();\n  const theme = useTheme();\n  const bgColor = {\n    light: theme.colors.white,\n    dark: theme.colors.gray[\"800\"]\n  };\n  const color = { light: theme.colors.black, dark: theme.colors.white };\n  const style = {\n    background: bgColor[colorMode],\n    color: color[colorMode]\n  };\n  return <div style={style}>{children}</div>;\n}\n\nexport default Page;\n","import React from \"react\";\nimport {\n  Accordion,\n  ThemeProvider,\n  CSSReset,\n  ColorModeProvider,\n  Heading,\n  Link,\n  Flex\n} from \"@chakra-ui/core\";\nimport ColorModeToggle from \"./ColorModeToggle\";\nimport TopicalHeading from \"./TopicalHeading\";\nimport Page from \"./Page\";\nimport data from \"./data/output-min.json\";\n\nfunction onCheck(key, checked) {\n  const storedItem = localStorage.getItem(key);\n  checked && !storedItem\n    ? localStorage.setItem(key, new Date())\n    : localStorage.removeItem(key);\n}\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <ThemeProvider>\n        <CSSReset />\n        <ColorModeProvider>\n          <Page>\n            <Heading p={3}>\n              <Flex justify=\"space-between\">\n                <Link\n                  isExternal\n                  href=\"https://www.churchofjesuschrist.org/blog/i-studied-more-than-2200-scriptures-about-the-savior-in-six-weeks-here-is-a-little-of-what-i-learned\"\n                >\n                  Scriptures of Jesus Christ\n                </Link>\n                <ColorModeToggle />\n              </Flex>\n            </Heading>\n            <Accordion>\n              {data.guideRefs.map((guideRef, i) => {\n                return (\n                  <TopicalHeading\n                    key={guideRef.source}\n                    heading={guideRef.display}\n                    count={guideRef.length}\n                    listItems={guideRef.ul}\n                    onCheck={onCheck}\n                  />\n                );\n              })}\n            </Accordion>\n          </Page>\n        </ColorModeProvider>\n      </ThemeProvider>\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}